// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package pb_test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_8c4b0f87f8142c5e, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type TestResp struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResp) Reset()         { *m = TestResp{} }
func (m *TestResp) String() string { return proto.CompactTextString(m) }
func (*TestResp) ProtoMessage()    {}
func (*TestResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_8c4b0f87f8142c5e, []int{1}
}
func (m *TestResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResp.Unmarshal(m, b)
}
func (m *TestResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResp.Marshal(b, m, deterministic)
}
func (dst *TestResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResp.Merge(dst, src)
}
func (m *TestResp) XXX_Size() int {
	return xxx_messageInfo_TestResp.Size(m)
}
func (m *TestResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResp.DiscardUnknown(m)
}

var xxx_messageInfo_TestResp proto.InternalMessageInfo

func (m *TestResp) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.test.Empty")
	proto.RegisterType((*TestResp)(nil), "pb.test.TestResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyTestClient is the client API for MyTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyTestClient interface {
	HelloWord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TestResp, error)
}

type myTestClient struct {
	cc *grpc.ClientConn
}

func NewMyTestClient(cc *grpc.ClientConn) MyTestClient {
	return &myTestClient{cc}
}

func (c *myTestClient) HelloWord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TestResp, error) {
	out := new(TestResp)
	err := c.cc.Invoke(ctx, "/pb.test.MyTest/HelloWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyTestServer is the server API for MyTest service.
type MyTestServer interface {
	HelloWord(context.Context, *Empty) (*TestResp, error)
}

func RegisterMyTestServer(s *grpc.Server, srv MyTestServer) {
	s.RegisterService(&_MyTest_serviceDesc, srv)
}

func _MyTest_HelloWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyTestServer).HelloWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.test.MyTest/HelloWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyTestServer).HelloWord(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.test.MyTest",
	HandlerType: (*MyTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWord",
			Handler:    _MyTest_HelloWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_test_8c4b0f87f8142c5e) }

var fileDescriptor_test_8c4b0f87f8142c5e = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x48, 0xd2, 0x03, 0x71, 0xa5, 0x64, 0xd2,
	0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12,
	0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xca, 0xa4, 0xc4, 0xcb, 0x12, 0x73, 0x32, 0x53, 0x12, 0x4b,
	0x52, 0xf5, 0x61, 0x0c, 0x88, 0x84, 0x12, 0x3b, 0x17, 0xab, 0x6b, 0x6e, 0x41, 0x49, 0xa5, 0x92,
	0x1c, 0x17, 0x47, 0x48, 0x6a, 0x71, 0x49, 0x50, 0x6a, 0x71, 0x81, 0x90, 0x10, 0x17, 0x4b, 0x79,
	0x7e, 0x51, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0x6d, 0xe4, 0xcf, 0xc5, 0xe6,
	0x5b, 0x09, 0x52, 0x21, 0xe4, 0xca, 0xc5, 0xe9, 0x91, 0x9a, 0x93, 0x93, 0x1f, 0x9e, 0x5f, 0x94,
	0x22, 0xc4, 0xa7, 0x07, 0x75, 0x80, 0x1e, 0xd8, 0x18, 0x29, 0x41, 0x38, 0x1f, 0x66, 0x9a, 0x92,
	0x68, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0xf8, 0x85, 0x78, 0xf5, 0xcb, 0x0c, 0xf5, 0xd3, 0x52, 0x53,
	0x53, 0xf4, 0x53, 0x12, 0x4b, 0x12, 0x93, 0xd8, 0xc0, 0x0e, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x68, 0xbb, 0x3b, 0x4c, 0xce, 0x00, 0x00, 0x00,
}
